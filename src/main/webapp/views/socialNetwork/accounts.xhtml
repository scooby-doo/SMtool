<!DOCTYPE html
          PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:fb="http://ogp.me/ns/fb#"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui">
<h:head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
	<title>Insert title here</title>
	<script> 
		var pathToDwrServlet = "http://smtool.wow.md/dwr/interface"; // Path to dwr on foreign domain
	</script>
	<script type='text/javascript' src="http://smtool.wow.md/dwr/engine.js" />
	<script type="text/javascript" src="http://smtool.wow.md/dwr/util.js" />
	<script type="text/javascript" src="http://smtool.wow.md/dwr/interface/facebookBean.js" />
</h:head>
<h:body>
	<div id="fb-root"></div>
	<script>
		window.fbAsyncInit = function() {
			// init the FB JS SDK
			FB.init({
				appId : '377737765678750', // App ID from the app dashboard
				channelUrl : '//smtool.wow.md/views/channel.html', // Channel file for x-domain comms
				status : true, // Check Facebook Login status
				cookie : true,
				xfbml : true, // Look for social plugins on the page
				oauth : true
			});

			// Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
			// for any authentication related change, such as login, logout or session refresh. This means that
			// whenever someone who was previously logged out tries to log in again, the correct case below 
			// will be handled. 
			FB.Event.subscribe('auth.authResponseChange', function(response) {
				// Here we specify what we do with the response anytime this event occurs. 
				if (response.status === 'connected') {
					// The response object is returned with a status field that lets the app know the current
					// login status of the person. In this case, we're handling the situation where they 
					// have logged in to the app.
					testAPI();
				} else if (response.status === 'not_authorized') {
					// In this case, the person is logged into Facebook, but not into the app, so we call
					// FB.login() to prompt them to do so. 
					// In real-life usage, you wouldn't want to immediately prompt someone to login 
					// like this, for two reasons:
					// (1) JavaScript created popup windows are blocked by most browsers unless they 
					// result from direct interaction from people using the app (such as a mouse click)
					// (2) it is a bad experience to be continually prompted to login upon page load.
					FB.login(function() {
					}, {
						perms : 'manage_pages'
					});
				} else {
					// In this case, the person is not logged into Facebook, so we call the login() 
					// function to prompt them to do so. Note that at this stage there is no indication
					// of whether they are logged into the app. If they aren't then they'll see the Login
					// dialog right after they log in to Facebook. 
					// The same caveats as above apply to the FB.login() call here.
					FB.login(function() {
					}, {
						perms : 'manage_pages'
					});
				}
			});
		};

		// Load the SDK asynchronously
		(function(d) {
			var js, id = 'facebook-jssdk', ref = d
					.getElementsByTagName('script')[0];
			if (d.getElementById(id)) {
				return;
			}
			js = d.createElement('script');
			js.id = id;
			js.async = true;
			js.src = "//connect.facebook.net/en_US/all.js";
			ref.parentNode.insertBefore(js, ref);
		}(document));

		// Here we run a very simple test of the Graph API after login is successful. 
		// This testAPI() function is only called in those cases. 
		function testAPI() {
			console.log('Welcome!  Fetching your information.... ');

			FB.api('/me', function(response) {
				console.log(response);
			});

			FB.getLoginStatus(function(response) {
				var accessTokenFacebook = response.authResponse.accessToken;
				console.log(response);
				console.log(accessTokenFacebook);
				passValue(accessTokenFacebook);
			});
		}

		function passValue(accessTokenFacebook) {
			facebookBean._path = "http://smtool.wow.md/dwr/interface";
			facebookBean.processData(accessTokenFacebook);
		}
	</script>

	<h:form id="form">
		<p:growl id="growl" showDetail="true" />
		<p:tabView id="tabView" width="50%">
			<p:ajax event="tabClose" listener="#{tabBean.onTabClose}"
				update=":form:growl" />
			<p:tab title="Facebook" closable="true">
				<!--Below we include the Login Button social plugin. This button uses the JavaScript SDK to-->
				<!--present a graphical Login button that triggers the FB.login() function when clicked.-->
				<div class="fb-login-button"></div>
			</p:tab>
			<p:tab title="Twitter" closable="true">
				<h:outputText value="Twitter."></h:outputText>
			</p:tab>
			<p:tab title="Linked In" closable="true">
				<h:outputText value="Linked In"></h:outputText>
			</p:tab>
		</p:tabView>
	</h:form>
</h:body>
</html>
